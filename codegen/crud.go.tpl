package {{ .Options.Package }}

// DO NOT EDIT: Code generated by github.com/NetCarrier/ticketmaster/cmd/yang-to-go

import (
    "time"
    "github.com/NetCarrier/ncservice"
)

{{- range .Cruds }}
// {{ .Def.Description}}
type {{ .Struct }} struct {
{{- range .Fields }}    
    {{ .Name }} {{ .GoType }} `json:"{{ .Name | toLowerCamel }}" db:"{{ .Col }}"` // {{ .Def.Description }}
{{- end }}
}

func (x *{{ .Struct }}) CrudInfo() ncservice.CrudInfo {
    var keys []string
{{- range .Fields "keys" }} 
    keys = append(keys, "{{ .Col }}")
{{- end }}
    return ncservice.CrudInfo{
        Table: "{{ .Table }}",
        Keys:  keys,
    }
}

{{- if .HasLastModified }}
func (x *{{ .Struct }}) GetLastModified() time.Time {
    return x.LastModified
}

func (x *{{ .Struct }}) SetLastModified(t time.Time) {
    x.LastModified = time.Now().UTC()
}

func (x *{{ .Struct }}) GetLastModifiedUser() string {
    return x.LastModifiedUser
}

func (x *{{ .Struct }}) SetLastModifiedUser(userId string) {
    x.LastModifiedUser = userId
}

func (x *{{ .Struct }}) GetCreateDate() time.Time {
    return x.CreateDate
}

func (x *{{ .Struct }}) SetCreateDate(t time.Time) {
    x.CreateDate = t
}

func (x *{{ .Struct }}) GetCreator() string {
    return x.Creator
}

func (x *{{ .Struct }}) SetCreator(userId string) {
    x.Creator = userId
}

func (x *{{ .Struct }}) GetOwner() string {
    return x.Owner
}

func (x *{{ .Struct }}) SetOwner(userId string) {
    x.Owner = userId
}
{{- end }}

func (u *{{ .Struct }}) Values(f ncservice.ValueFilter) []ncservice.Value {
	var args []ncservice.Value
{{- range .Fields }}
    args = ncservice.AppendFiltered(args, ncservice.Value{Col: "{{ .Col }}", Val: u.{{ .Name }}}, f)
{{- end }}
	return args
}

func (u *{{ .Struct }}) SetValues(params []ncservice.Value) {
	for _, p := range params {
		switch p.Col {
{{- range .Fields }}
		case "{{ .Col }}":
            x := p.Val.({{ .GoType }})
			u.{{ .Name }} = x
{{- end }}
        }
    }
}

// {{ .Def.Description}}
type {{ .Struct }}Create struct {
{{- range .Fields "editable"}}
    {{ .Name }} {{ .GoType }} `json:"{{ .Name | toLowerCamel }}" db:"{{ .Col }}"` // {{ .Def.Description }}
{{- end }}
}

func (u *{{ .Struct }}Create) Values(f ncservice.ValueFilter) []ncservice.Value {
	var args []ncservice.Value
{{- range .Fields "editable"}}
    args = ncservice.AppendFiltered(args, ncservice.Value{Col: "{{ .Col }}", Val: u.{{ .Name }}}, f)
{{- end }}
	return args
}

// {{ .Def.Description}}
type {{ .Struct }}Update struct {
{{- range .Fields "editable"}}
    {{ .Name }} {{ .GoTypePtr }} `json:"{{ .Name | toLowerCamel }}" db:"{{ .Col }}"` // {{ .Def.Description }}
{{- end }}
}

func (u *{{ .Struct }}Update) Values(f ncservice.ValueFilter) []ncservice.Value {
	var args []ncservice.Value
{{- range .Fields "editable"}}
    if u.{{ .Name }} != nil {
        args = ncservice.AppendFiltered(args, ncservice.Value{Col: "{{ .Col }}", Val: {{.Deref}}u.{{ .Name }}}, f)
    }
{{- end }}
	return args
}

{{- end }}

{{- range $ename, $enum :=.Enums }}
type {{ $ename }} {{ $enum.GoType}} 

const (
{{- range $enum.Values }}
    {{ $enum.Prefix }}_{{ .Ident }} {{ $ename }} = {{ .Value }}
{{- end }}
)
{{- end }}

// ignore, avoids unused time import error
var _ = time.Time{}