package {{ .Options.Package }}

// DO NOT EDIT: Code generated by github.com/NetCarrier/ticketmaster/cmd/yang-to-go

import (
    "fmt"
    "time"
    "database/sql/driver"
)

{{- range .Cruds }}
// {{ .Def.Description}}
type {{ .Struct }} struct {
{{- range .Fields }}    
    {{ .Name }} {{ .GoType }} `json:"{{ .Name | toLowerCamel }}" gorm:"{{ .GormTags }}"` // {{ .Def.Description }}
{{- end }}
}

func (x {{ .Struct }}) TableName() string {
    return "{{ .Table }}"
}

{{- if .HasLastModified }}
func (x *{{ .Struct }}) GetLastModified() time.Time {
    return x.LastModified
}

func (x *{{ .Struct }}) SetLastModified(t time.Time) {
    x.LastModified = time.Now().UTC()
}

func (x *{{ .Struct }}) GetLastModifiedUser() string {
    return x.LastModifiedUser
}

func (x *{{ .Struct }}) SetLastModifiedUser(userId string) {
    x.LastModifiedUser = userId
}

func (x *{{ .Struct }}) GetCreateDate() time.Time {
    return x.CreateDate
}

func (x *{{ .Struct }}) SetCreateDate(t time.Time) {
    x.CreateDate = t
}

func (x *{{ .Struct }}) GetCreator() string {
    return x.Creator
}

func (x *{{ .Struct }}) SetCreator(userId string) {
    x.Creator = userId
}

func (x *{{ .Struct }}) GetOwner() string {
    return x.Owner
}

func (x *{{ .Struct }}) SetOwner(userId string) {
    x.Owner = userId
}
{{- end }}


// {{ .Def.Description}}
type {{ .Struct }}Create struct {
{{- range .Fields "editable"}}
    {{ .Name }} {{ .GoType }} `json:"{{ .Name | toLowerCamel }}" gorm:"{{ .GormTags }}"` // {{ .Def.Description }}
{{- end }}
}


// {{ .Def.Description}}
type {{ .Struct }}Update struct {
{{- range .Fields "editable"}}
    {{ .Name }} {{ .GoTypePtr }} `json:"{{ .Name | toLowerCamel }}" gorm:"{{ .GormTags }}"` // {{ .Def.Description }}
{{- end }}
}

{{- end }}

{{- range $ename, $enum :=.Enums }}
type {{ $ename }} {{ $enum.GoType}} 

const (
{{- range $enum.Values }}
    {{ $enum.Prefix }}_{{ .Ident }} {{ $ename }} = {{ .Value }}
{{- end }}
)

// implements sql.Scanner
func (e *{{ $ename }}) Scan(value any) error {
	s, ok := value.([]uint8)
	if !ok {
		return fmt.Errorf("unable to scan %T into {{ $ename }}", value)
	}
	*e = {{ $ename }}(s)
	return nil
}

// implements driver.Valuer
func (e {{ $ename }}) Value() (driver.Value, error) { 
    if e == "" {
        return nil, nil
    }
	return []uint8(e), nil
}

// implements driver.Validator
func (e {{ $ename }}) IsValid() bool {
    switch e { 
    case
{{- range $index, $e := $enum.Values -}}
        {{if ne $index 0 }},{{end}} {{ $enum.Prefix }}_{{ $e.Ident }}
{{- end }}:
        return true
    }
    return false
}

{{- end }}

// ignore, avoids unused time import error
var _ = time.Time{}